// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
   id Int @default(autoincrement()) @id
   email String @unique
   password_hash String
   basket Basket?
   role Role @default(USER) 
   requests Request[]
   @@map("user")
} 


model ServiceCategory{
  id Int @default(autoincrement()) @id
  title String
  description String
  img String
  services Service[]
}

model Service{
  id Int @default(autoincrement()) @id
  title String
  serviceCategory ServiceCategory @relation(fields: [serviceId], references: [id])
  serviceId Int

  description String
  price String
  img String

  requests Request[]

}


model ProductCategory{
  id Int @default(autoincrement()) @id
  title String
  description String
  img String
  products Product[]  
}

model Product{
  id Int @default(autoincrement()) @id
  title String
  productCategory ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int 
  description String
  price String
  img String

  baskets ProductsInBasket[]
  @@map("product")
}
 
model ProductsInBasket{
  id Int @default(autoincrement()) @id
  basket Basket @relation(fields: [basketId],references: [id])
  basketId Int

  product Product @relation(fields: [productId], references: [id])
  productId Int

  count Int
}

model Basket{
  id Int @default(autoincrement()) @id
  basketUser User @relation(fields: [userId], references: [id]) 
  userId Int @unique
  requests Request[]

  products ProductsInBasket[]
  
}


model Request{
  id Int @default(autoincrement()) @id

  phoneNumber String

  name String

  description String

  status String @default("WORKING")

  date DateTime

  user User @relation(fields: [userId], references: [id]) 
  userId Int

  basket Basket @relation(fields: [basketId],references: [id])
  basketId Int 

  service Service? @relation(fields: [serviceId], references: [id])
  serviceId Int? 

}
 

enum Role{
  USER 
  ADMIN
}